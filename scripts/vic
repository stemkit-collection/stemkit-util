#!/bin/ksh
# vim: sw=2:
    IDENT="@(#)Title:     Class edit"
   AUTHOR="@(#)Author:    Gennady F. Bystritsky (gfb@tonesoft.com)"
  VERSION="@(#)Version:   1.0"
PRODSTAMP="
###############
# Class edit. #
###############
"
unset ERRLOG
LANG=C export LANG

RedirectErrors=NO
 ShowProdStamp=NO
       SigList="1 2 3 8 15"

PrintUsage () {
  ShowMsg "USAGE: $ScriptName [-x<debug level>] <class>"
}

CleanUp () {
  eval `EntryPoint 3`
  [ "${ERRLOG:+set}" = set ] && rm -f "$ERRLOG"
}

main () {
  : unset ERRLOG
  unset OPTIONS
  [ $# -eq 0 ] || {
    while getopts "x" opt; do
      case "$opt" in
        x)
          DebugLevel=$OPTARG
        ;;
        *) 
          PrintUsage; return 2
        ;;
      esac
    done
    shift `expr $OPTIND - 1`
  }
  eval `EntryPoint 1`

  [ $# -ne 1 ] && {
    PrintUsage; return 2
  }
  ClassEdit $1
  return $?
}

ClassEdit ()
{
  [ $# -ne 1 ] && return 2
  className=$1
  case "$className" in
    /*)
    ;;
    *)
      className="`pwd`/$className"
    ;;
  esac
  classDir=`dirname "$className"`
  classDir=`GenDirPath "$classDir"`

  [ "${classDir:+set}" = set ] || {
    ErrMsg "Cannot access class directory"
    return 3
  }
  className=`basename "$className"|sed 's/\..*$//'`
  
  classHead="${classDir}/${className}"
  classBody="${classDir}/${className}"
  [ -f "${classHead}.h" ] || {
    classHead=`echo $classHead|sed 's%/lib/%/include/%'`
  }

  classBody=`adjustClassBody "${classBody}"`

  [ "${EDITOR:=vim}" = vim ] && {
    OPTIONS="-o2"
  }
  ${EDITOR} ${OPTIONS} "$classHead".h "$classBody".[mrcly]*
}

adjustClassBody()
{
  for type in c rcc cc cpp m mm; do
    [ -f "${classBody}.rcc" ] && {
      echo ${classBody}
      return
    }
  done

  echo $classBody|sed 's%/include/%/lib/%'
}

##################
# Script Library #
##################

ScriptName=`basename $0`; status=0; umask 0
AWK=nawk; { $AWK ''; } >/dev/null 2>&1 || AWK=awk

> "${ERRLOG:=/tmp/$ScriptName.$$}"
exec 3>&1 4>&2 
[ "$RedirectErrors" = YES ] && exec 2>"$ERRLOG" 1>&2

UPPER="[A-Z]"; LOWER="[a-z]"
tr "[A-Z]" "[a-z]" </dev/null 1>&0 2>&1 || {
  UPPER="[:upper:]"; LOWER="[:lower:]"
}

tolower () {
  echo $*|tr "$UPPER" "$LOWER"
}

toupper () {
  echo $*|tr "$LOWER" "$UPPER"
}

ErrMsg () {
  echo "$ScriptName: $*" 1>&4 2>&1
}

ShowMsg () {
  echo "$*" 1>&3 2>&4
}

GenDirPath () {
  [ $# -eq 1 ] && {
    (cd "$1">/dev/null 2>&1  && pwd)
  }
  return $?
}

ShowProgress () {
  cnt=0; max=${2:-75}
  while read line;do
    [ "$cnt" -eq 0 ] && ShowMsg "${1:-Doing} \c"
    ShowMsg ".\c"; cnt=`expr $cnt + 1`
    [ $cnt -gt "$max" ] && {
      cnt=0; ShowMsg;
    }
  done
  [ $cnt -eq 0 ] || ShowMsg
}

PrintVars () {
  for v in $*
  do
    eval echo $v=\$$v
  done
}

VerifyDir () {
  eval test -d "$1" -a -r "$1"; return $?
}

VerifyFile () {
  eval test -f "$1" -a -r "$1"; return $?
}

VerifyProg () {
  eval test -f "$1" -a -x "$1"; return $?
}

ExtractValues () {
  [ $# -gt 1 ] && {
    file=$1; unset pattern; shift
    for arg
    do
      arg=`echo $arg|sed -n '/^[a-zA-Z][a-zA-Z1-9_]*$/p'`
      [ "${arg:+set}" = set ] && {
        [ "${pattern:+set}" = set ] && {
          pattern="${pattern};"
        }
        search='^[ 	]*'"${arg}"'=\([^`;]*\)[ 	]*$'
        replace="${arg}="\''\1'\'
        pattern="${pattern}s/$search/$replace/gp"
      }
    done
    [ "${pattern:+set}" = set ] && VerifyFile "$file" && {
      eval `sed -n "$pattern"<"$file"`
    }
  }
}

ObtainSupportedCodesets () {
  VerifyProg "$CSMNORM" && {
    set -- `"$CSMNORM" CODESET`
    while [ $# -gt 1 ]; do
      echo $1; shift 2
    done
  }
}

EntryPoint () {
  [ "${DebugLevel:=0}" -ge "${1:-1}" ] && {
    echo 'echo "[Function: $0]" 1>&2; set -xv'
  }
}

CSMNORM=/usr/lib/csm/bin/csmnorm
Norm () {
  if [ -x "$CSMNORM" ]; then
    "$CSMNORM" $*
  else
    echo $2
  fi
  return $?
}

AwkLibrary='
  function norm(str){
    while(substr(str,1,1)==" ") str = substr(str,2);
    while(substr(str,length(str),1)==" ")
      str = substr(str,1,length(str)-1)
    return str
  }
'

trap CleanUp 0 $SigList
[ "$ShowProdStamp" = YES ] &&  ShowMsg "$PRODSTAMP"

main "$@"
exit $?

#############
# TEMPLATES #
#############

Fun () {
  eval `EntryPoint 5`
  return 0
}

$AWK '
  '"$AwkLibrary"'
'

#############
#############
