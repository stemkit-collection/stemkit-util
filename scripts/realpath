#!/usr/bin/env ruby
=begin
  vim: sw=2:
  Copyright (c) 2014, EMC Corporation, http://www.emc.com

  This software is property of the mentioned copyright
  holder and cannot be used or distributed  other than
  under a written consent agreement between individual
  parties.

  Author: Gennady Bystritsky (bystrg@emc.com)
=end

[ [] ].tap do |_items, _cache, _folder|
  # Removes all the entries in between %{folder}/bin/hooks
  # and %{folder}/bin inclusively. This is needed to ignore
  # entries possibly added by app-env facility.
  #
  ENV['PATH'].to_s.split(File::PATH_SEPARATOR).each do |_item|
    next (_item == _folder ? [].tap { _cache = false } : _cache) << _item if _cache

    _folder, name = File.split(_item)
    (name == 'hooks' && File.basename(_folder) == 'bin' ? _cache = [] : _items) << _item
  end

  ORIGINAL_SYSTEM_PATH = _cache ? _items + _cache : _items
  ORIGINAL_LOAD_PATH = $:.clone
end

$:.concat ORIGINAL_SYSTEM_PATH

require 'tsc/application.rb'
require 'tsc/path.rb'

class Application < TSC::Application
  def initialize
    super { |_config|
      _config.arguments = '<item> ...'
      _config.options = [
        [ '--dump', 'Dump the search path', nil, '-d' ],
        [ '--original', 'Output original items', nil, '-o' ],
        [ '--loadpath', 'Use Ruby load path', nil, '-l' ],
        [ '--path', 'Use environment PATH', nil, '-p' ],
        [ '--all', 'Output all found items', nil, '-a' ]
      ]
      _config.description = [
        'Prints out real path info for the specified items'
      ]
    }
  end

  def start
    handle_errors {
      process_command_line

      require 'rubygems'
      require 'pathname'

      if options.dump?
        report(search_path)
        return if ARGV.empty?

        empty_line = true
      end

      ARGV.each do |_item|
        puts if empty_line

        report quantify *figure(_item)
        empty_line = true
      end
    }
  end

  private
  #######

  def search_path
    @search_path ||= options.loadpath? ? ORIGINAL_LOAD_PATH : ORIGINAL_SYSTEM_PATH
  end

  def figure(item)
    case item
      when %r{^[~/]}, %r{^[.][.]?/?}
        return File.expand_path(item)
    end

    find_items(item).tap do |_items|
      raise TSC::MissingResourceError, item if _items.empty?
    end
  end

  def find_items(item)
    Dir.glob search_path.map { |_path|
      File.join _path, item
    }
  end

  def report(items)
    puts pathnames(items).uniq
  end

  def pathnames(items)
    items.map { |_item|
      Pathname(_item).tap { |_pathname|
        break _pathname.realpath unless options.original?
      }
    }
  end

  def quantify(*items)
    options.all? ? items : items.take(1)
  end
end

Application.new.start
