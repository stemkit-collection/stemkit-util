#!/bin/ksh
    IDENT="@(#)Title:     Print utility"
   AUTHOR="@(#)Author:    Gennady F. Bystritsky (gfb@tonesoft.com)"
  VERSION="@(#)Version:   1.0"
PRODSTAMP="
############################################
# Print files using expand and pr filters. #
############################################
"
DESCRIPTION="
  Print files using expand and pr filters.
"
ARGUMENTS="[-x<debug_level>][-h][-d<dest>][-n<num>][-o<option>][-O<offset>][-L<lines>][-cs]"

    RedirectErrors=NO
ShowCleanupMessage=NO
     ShowProdStamp=NO
           SigList="1 2 3 8 15"

main () 
{
  unset LPOPTIONS PROFFSET PRCOLUMNS PRLINES
  [ $# -eq 0 ] || {
    while getopts "hx:d:n:o:csO:L:" opt; do
      case "$opt" in
        h)
          PrintUsage
          PrintDescription
          return 0
        ;;
        x)
          DebugLevel=$OPTARG
          [ "$DebugLevel" -ge 1 ] && {
            exec 1>&3 2>&4
          }
        ;;
	W)
	  PRCOLUMNS=${OPTARG}
	;;
	O)
	  PROFFSET=${OPTARG}
	;;
	L)
	  PRLINES=${OPTARG}
	;;
	d|n|o)
	  LPOPTIONS="${LPOPTIONS} -${opt}${OPTARG}"
	;;
	c|s)
	  LPOPTIONS="${LPOPTIONS} -${opt}"
	;;
        *) 
          PrintUsage
          return 2
        ;;
      esac
    done
    shift `expr $OPTIND - 1`
  }
  : ${PROFFSET:=4} ${PRLINES:=64} ${PRCOLUMNS:=80}

  eval `EntryPoint 2`

  [ $# -eq 0 ] && {
    ErrMsg "No files to print."
    return 2
  }
  DIR=/tmp/${ScriptName}-dir.$$
  rm -rf "$DIR"
  mkdir "$DIR" || {
    ErrMsg "Cannot create temporary directory."
    return 3
  }
  UpdateCleanupList "$DIR"
  for file in "$@"; do
    VerifyFile "$file" || {
      ErrMsg "Cannot access file \"$file\""
      continue
    }
    expand "$file" > "${DIR}/`basename ${file}`" || {
      ErrMsg "Cannot copy \"$file\" to temporary directory."
      continue
    }
  done

  exec 1>&3 2>&4 3>&- 4>&-

  cd "$DIR" && {
    for file in "$@"; do
      file=`basename ${file}`
      VerifyFile "${file}" && {
	u2d < "${file}" | pr -F -w`expr ${PRCOLUMNS} - ${PROFFSET}` -f -o"${PROFFSET}" -l"${PRLINES}" | {
	  lp ${LPOPTIONS} | sed "s/(standard input)/(${file})/g"
	}
      }
    done
  }
  return $?
}

##################
# Script Library #
##################

UPPER="[A-Z]"
LOWER="[a-z]"

tr "$UPPER" "$LOWER" </dev/null 1>&0 2>&1 || {
  UPPER="[:upper:]"
  LOWER="[:lower:]"
}

tolower () 
{
  echo $*|tr "$UPPER" "$LOWER"
}

toupper () 
{
  echo $*|tr "$LOWER" "$UPPER"
}

ErrMsg () 
{
  echo "$ScriptName: $*" 1>&4 2>&1
}

ShowMsg () 
{
  echo "$*" 1>&3 2>&4
}

WrapUp ()
{
  eval `EntryPoint 4`
  $AWK -v margin="$1" '
    BEGIN{
      if(margin !~ /^[0-9]+$/){
        margin = 70
      }
    }
    {
      total = 0
      string = ""
      for(field=1; field<=NF ;field++){
        string = string $field " "
        total += length($field)+1
        if(total>=margin){
          print string
          string = ""
          total = 0
        }
      }
      if(total>0){
        print string
      }
    }
  '
}

ShowBox ()
{
  eval `EntryPoint 4`

  $AWK -v header="$1" -v prefix="$2" '
    BEGIN {
      if(prefix ~ /^[0-9]+$/){
        prefix = sprintf("%" prefix "." prefix "s"," ")
      }
      header_len = length(header)
      maxlen = header_len
      if(maxlen){
        maxlen += 2
      }
      line = 0
    }
    $0 !~ /^[ \t]*$/ {
      s = $0
      if(sub("^[ \t]*:","",s)!=1){
        sub("^[ \t]*","",s)
        sub("[ \t]*$","",s)
      }
      len = length(s)
      if(len>maxlen){
        maxlen = len
      }
      array[line++] = s
    }
    END {
      w = maxlen + 4
      empty = sprintf("|%" w "." w "s|"," ")
      bottom = sprintf("+%" w "." w "s+"," ")
      gsub(" ","-",bottom)

      if(header_len>0){
        len = (maxlen/2)-(header_len/2+1)+3
        top = sprintf("%s %s ",substr(bottom,1,len),header)
        top = top substr(bottom,len+header_len+3)
      }
      else{
        top = bottom
      }
      printf("%s%s\n%s%s\n",prefix,top,prefix,empty)
      w = maxlen
      for(count=0; count<line ;count++){
        printf("%s|  %-" w "." w "s  |\n",prefix,array[count])
      }
      printf("%s%s\n%s%s\n",prefix,empty,prefix,bottom)
    }
  ' 1>&3 2>&4
}

runEcho ()
{
  ShowMsg "$*"
  "$@" 1>&3 2>&4
  status=$?
  return $status
}

runNoEcho ()
{
  "$@" 1>&3 2>&4
  status=$?
  return $status
}

GenDirPath () 
{
  [ $# -eq 1 ] && {
    (cd "$1">/dev/null 2>&1  && pwd)
  }
  return $?
}

SplitOutput ()
{
  while read line; do
    echo "$line"
    echo "$line" 1>&5
  done
}

ShowProgress () 
{
  cnt=0; max=${2:-70}
  while read line;do
    [ "$cnt" -eq 0 ] && ShowMsg "${1:- } \c"
    ShowMsg ".\c"; cnt=`expr $cnt + 1`
    [ $cnt -gt "$max" ] && {
      cnt=0; ShowMsg;
    }
  done
  [ $cnt -eq 0 ] || ShowMsg
}

CheckGroupExistence ()
{
  [ $# -eq 1 ] && {
    $AWK -F: -v group=$1 -v status=1 "$AwkLibrary"'
      $0~/^[ \t]#/ {
        next
      }
      NF>1 {
        field = trim($1)
        if(field==group){
          status = 0
          exit
        }
      }
      END{
        exit(status)
      }
    ' /etc/group
  }
  return 1
}

GetCurUserGroup ()
{
  id|sed -n 's/^.*(\(.*\)).*(\(.*\)).*$/\1 \2/p'
}

GetCurUser ()
{
  set entry `GetCurUserGroup`; shift
  [ $# -eq 2 ] && {
    echo $1
  }
}

GetCurGroup ()
{
  set entry `GetUserGroup`; shift
  [ $# -eq 2 ] && {
    echo $2
  }
}

CheckFunction ()
{
  [ $# -eq 1 ] && {
    type "$1" 2>/dev/null | $AWK -v name="$1" -v status=1 '
      {
        if($0 == name " is a function"){
          status = 0
        }
        exit
      }
      END{
        exit(status)
      }
    '
  }
  return $?
}

CheckVars () 
{
  for v in $*
  do
    eval var=\$$v
    [ "${var:+set}" = set ] || {
      ErrMsg "$v is not set or bad."
      return 1
    }
  done
  return 0
}

PrintVars () 
{
  for v in $*
  do
    eval echo $v=\$$v
  done
}

VerifyDir () 
{
  eval test -d "$1" -a -r "$1"
  return $?
}

VerifyFile () 
{
  eval test -f "$1" -a -r "$1"
  return $?
}

VerifyProg () 
{
  eval test -f "$1" -a -x "$1"
  return $?
}

ExtractValues () 
{
  [ $# -gt 1 ] && {
    file=$1; unset pattern; shift
    for arg
    do
      arg=`echo $arg|sed -n '/^[a-zA-Z][a-zA-Z1-9_]*$/p'`
      [ "${arg:+set}" = set ] && {
        [ "${pattern:+set}" = set ] && {
          pattern="${pattern};"
        }
        search='^[ 	]*'"${arg}"'=\([^`;]*\)[ 	]*$'
        replace="${arg}="\''\1'\'
        pattern="${pattern}s/$search/$replace/gp"
      }
    done
    [ "${pattern:+set}" = set ] && VerifyFile "$file" && {
      eval `sed -n "$pattern"<"$file"`
    }
  }
}

EntryPoint () 
{
  [ "${DebugLevel:=0}" -ge "${1:-1}" ] && {
    echo 'echo "[Function: $0]" 1>&2; set -xv'
  }
}

CLEANUP_LIST=
CleanUp () 
{
  eval `EntryPoint 4`
  cd /
  [ "$ShowCleanupMessage" = YES ] && {
    ErrMsg "Cleaning up, please wait"
  }
  set entry $CLEANUP_LIST; shift
  for entry in "$@"; do
    eval value=\"$entry\"
    [ "${value:+set}" = set ] && {
      rm -rf "$value"
    }
  done
  unset CLEANUP_LIST
}

UpdateCleanupList ()
{
  eval `EntryPoint 4`

  for arg in "$@"; do
    CLEANUP_LIST="$CLEANUP_LIST $arg"
  done
}

PrintUsage () 
{
  echo "$ARGUMENTS"|$AWK "$AwkLibrary"'
    BEGIN {
      prefix = "USAGE: '"$ScriptName"'"
      len = length(prefix)
      printf("\n")
    }
    $0 !~ /^[ \t]*$/ {
      printf("%" len "." len "s %s\n",prefix,trim($0));
      prefix = ""
    }
    END {
      printf("\n")
    }
  ' 1>&4
  unset ShowCleanupMessage
}

PrintDescription ()
{
  {
    echo "DESCIPTION:" 
    echo "$DESCRIPTION"|sed '/^[ 	]*$/d;s/^[ 	]*/  /'
  } 1>&4
}

AwkLibrary='
  function trim(str){
    sub("^[ \t]*","",str)
    sub("[ \t]*$","",str)
    return str
  }
'

########
# MAIN #
########
AWK=nawk; { $AWK ''; } >/dev/null 2>&1 || AWK=awk
ScriptName=`basename $0`

umask 02

unset status
UpdateCleanupList '$ERRLOG'
trap CleanUp 0 $SigList

ERRLOG="/tmp/$ScriptName.$$"
> "$ERRLOG"

exec 3>&1 4>&2 5>/dev/null

[ "$RedirectErrors" = YES ] && exec 2>"$ERRLOG" 1>&2
[ "$ShowProdStamp" = YES ] &&  ShowMsg "$PRODSTAMP"

main "$@"
exit $?
