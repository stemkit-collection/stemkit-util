#!/bin/ksh
    IDENT="@(#)Title:     UNIX to CD(ISO9660) tree converter."
   AUTHOR="@(#)Author:    Gennady F. Bystritsky (bystr@florin.ru)"
COPYRIGHT="@(#)Copyright: DataX/FLORIN, Inc. (1996-1997)"
PRODSTAMP="
########################################################################
# CDROM Directory Tree Converter. Copyright(c) 1996 DataX/FLORIN, Inc. #
########################################################################
"
unset ERRLOG
LANG=C export LANG

TODO () {
  - [DONE] Recognize and handle sybolic links. Type 'L'.
  - [DONE] Recognize and handle moved directories. Type 'M'.
  - [DONE] Allow for more file names with the same prefix and a generated
    suffix in a single directory. For now there may be only 25 such files.
  - [DONE] Do the same in "cdlink" script.
}

RedirectErrors=YES
 ShowProdStamp=YES
       SigList="1 2 3 8 15"

PrintUsage () {
  ShowMsg "USAGE: $ScriptName [-x<debug level>][<dir>...]" 1>&2
}

TRANSTBL="ymtrans.tbl"
unset TEMP

main () {
  [ $# -eq 0 ] || {
    while getopts "x:" opt; do
      case "$opt" in
        x)
          DebugLevel=$OPTARG
        ;;
        *) 
          PrintUsage; return 1
        ;;
      esac
    done
    shift `expr $OPTIND - 1`
  }
  eval `EntryPoint 1`

  TEMP="/tmp/$ScriptName.$$.tmp"
  for dir
  do
    topdir=`GenDirPath "$dir"`
    if [ "${topdir:+set}" = set ]; then
      ShowMsg "Directory \"$topdir\""
      find $topdir -type d -depth -print | {
        HandleDir | ShowProgress "  Processing" 60
      }
    else
      ErrMsg "\"$dir\" is not a directory"
    fi
  done

  return 0
}

HandleDir () {
  eval `EntryPoint 2`

  TOPDIR=`pwd`; status=0
  while read line;do
    cd $line; 
    touch "$TRANSTBL" && VerifyFile "$TRANSTBL" && test ! -x "$TRANSTBL"
    [ $? -eq 0 ] || continue

    relpath=`echo $line|sed -n "s#^$topdir/\{0,1\}##p"`
    botdir=`
      echo $relpath|sed -n 's#\([^/]*/[^/]*/[^/]*/[^/]*/[^/]*\)/.*$#\1#p'
    `
    [ "${botdir:+set}" = set ] && {
      reldir=`echo $relpath|sed -n "s#^$botdir/\{0,1\}##p"`
    }
    unset extra
    [ -s "$TRANSTBL" ] && extra="$TRANSTBL"
    ls -la|GenerateTable>"$TEMP" || {
      status=$?
      case "$status" in
        1) ErrMsg "Internal error \c" ;;
        3) ErrMsg "Bad file type encounted \c" ;;
        4) ErrMsg "GenSym overflow \c" ;;
        *) ErrMsg "Undefined disaster \c" ;;
      esac
      ShowMsg "in \"`pwd`\""
      cp "$TEMP" /tmp/LOG
      break
    }
    trap '' $SIGLIST
    while read line;do
      set -- $line
      [ $# -ge 3 ] || continue
      case "$1" in 
        L)
          [ $# -eq 4 ] && echo rm -f "$4"
        ;;
        M)
          [ $# -eq 4 -d "$4" ] && echo mv -f "$4" "$2"
        ;;
        F|D)
          [ $# -eq 3 -a "$2" != "$3" ] && echo mv -f "$3" "$2"
        ;;
      esac
      echo "echo `pwd`/$4"
    done<"$TEMP"|sort -r|$SHELL
    cp "$TEMP" "$TRANSTBL" 
    chmod 755 "$TRANSTBL"
    trap $SIGLIST
  done
  cd "$TOPDIR"
  return $status
}

GenerateTable () {
  eval `EntryPoint 3`

  $AWK '
    function ProduceLine (ftype,gen,path,name) {
      name = path; sub("^.*/","",name);
      fmt="%s %-14s %s" (name==path?"\n":"\t%s\n")
      printf fmt,ftype,gen,name,path
    }
    function inc (value) {
      return(value<48?48:(value==57?97:(value>121?-1:value+1)));
    }
    function ClearGenEnv () {
      used["clean"] = 0; c1 = inc(0); c2 = c1; tail = ""
      for(item in used) used[item] = 0
    }
    function GenTail (tail) {
      for(;;c2=inc(c2)){
        if(c2<0){
          if((c1=inc(c1))<0) return;
          c2 = inc(0);
        }
        if(used[tail=sprintf("%c%c",c1,c2)]==0){
          used[tail] = 1; return(tail);
        }
      }
      return("");
    }
    function StoreName (ftype,source_name,dest_name,ext) {
      if(!dest_name) dest_name = source_name
      if((nf=split(source_name,arr,"."))>1){
        ext = "." tolower(sprintf("%.3s",arr[nf]))
      }
      if(!(name=tolower(sprintf("%.8s",arr[1])))) name="noname"
      if((name ext!=source_name)||(substr(name,length(name)-2,1)=="_")){
        name = sprintf("%.5s",name) 
      }
      n_coresp[name ext] = n_coresp[name ext] " " ftype dest_name
    }
    NF>8 && $9 != "." && $9 != ".." && $9 != "'"$TRANSTBL"'"{
      if((ftype=substr($0,1,1))=="d"){
        if("'"$botdir"'"){
          fmt="M %-14s %s\t'"$reldir"'/%s\n"
          printf fmt,"<dirname>",$9,$9>>"'"$topdir/$botdir/$TRANSTBL"'"
          next
        }
        ftype="D"
      }
      else if(ftype=="-") ftype="F"
      else if(ftype=="l"){
        fmt="L %-14s %s\t'"$relpath"'/%s\n"
        printf fmt,"symbolic",$11,$9>>"'"$topdir/$TRANSTBL"'"
        next
      }
      else{
        status=3; exit
      }
      StoreName(ftype,$9)
    }
    END{
      if(status) exit(status)
      if("'"$extra"'"){
        while(getline<"'"$extra"'"){
          if(NF!=4) continue;
          if($1=="M") StoreName("M",$3,$4)
          if($1=="L") symlink[$4] = $3
        }
      }
      for(name in n_coresp){
        if((number=split(n_coresp[name],arr,FS))==1){
          ProduceLine(substr(arr[1],1,1),name,substr(arr[1],2));
          continue
        }
        else ClearGenEnv(); 

        ext = (nf=split(name,arr1,"."))>1?"." arr1[nf]:""
        name = sprintf("%.5s",arr1[1]) 
        for(cnt=1;cnt<=number;cnt++){
          if((tail=GenTail())=="") exit(4);
          ftype = substr(arr[cnt],1,1)
          ProduceLine(ftype,name "_" tail ext,substr(arr[cnt],2));
        }
      }
      for(name in symlink){
        fmt="L %-14s %s\t%s\n"
        printf fmt,"symbolic",symlink[name],name
      }
      exit(0)
    }
  '
  return $?
}

CleanUp () {
  eval `EntryPoint 1`

  [ "${TEMP:+set}" = set ] && rm -f "$TEMP"
  [ "${ERRLOG:+set}" = set ] && {
    exec 1>&3 2>&4
    [ -s "$ERRLOG" ] && {
      echo "\n$ScriptName: Output to log occurred\n==="
      cat "$ERRLOG"
    }|pg -en
    rm -rf "$ERRLOG"
  }
}

##################
# Script Library #
##################

ScriptName=`basename $0`; status=0; umask 0
AWK=nawk; { $AWK ''; } >/dev/null 2>&1 || AWK=awk

> "${ERRLOG:=/tmp/$ScriptName.$$.log}"
exec 3>&1 4>&2 
[ "$RedirectErrors" = YES ] && exec 2>"$ERRLOG" 1>&2

UPPER="[A-Z]"; LOWER="[a-z]"
tr "[A-Z]" "[a-z]" </dev/null 1>&0 2>&1 || {
  UPPER="[:upper:]"; LOWER="[:lower:]"
}

tolower () {
  echo $*|tr "$UPPER" "$LOWER"
}

toupper () {
  echo $*|tr "$LOWER" "$UPPER"
}

ErrMsg () {
  echo "$ScriptName: $*" 1>&4 2>&1
}

ShowMsg () {
  echo "$*" 1>&3 2>&4
}

GenDirPath () {
  [ $# -eq 1 ] && {
    (cd "$1">/dev/null 2>&1  && pwd)
  }
  return $?
}

ShowProgress () {
  cnt=0; max=${2:-75}
  while read line;do
    [ "$cnt" -eq 0 ] && ShowMsg "${1:-Doing} \c"
    ShowMsg ".\c"; cnt=`expr $cnt + 1`
    [ $cnt -gt "$max" ] && {
      cnt=0; ShowMsg;
    }
  done
  [ $cnt -eq 0 ] || ShowMsg
}

PrintVars () {
  for v in $*
  do
    eval echo $v=\$$v
  done
}

VerifyFile () {
  eval test -f "$1" -a -r "$1"; return $?
}

VerifyProg () {
  eval test -f "$1" -a -x "$1"; return $?
}

ExtractValues () {
  [ $# -gt 1 ] && {
    file=$1; unset pattern; shift
    for arg
    do
      arg=`echo $arg|sed -n '/^[a-zA-Z][a-zA-Z1-9_]*$/p'`
      [ "${arg:+set}" = set ] && {
        [ "${pattern:+set}" = set ] && {
          pattern="${pattern};"
        }
        search='^[ 	]*'"${arg}"'=\([^`;]*\)[ 	]*$'
        replace="${arg}="\''\1'\'
        pattern="${pattern}s/$search/$replace/gp"
      }
    done
    [ "${pattern:+set}" = set ] && VerifyFile "$file" && {
      eval `sed -n "$pattern"<"$file"`
    }
  }
}

ObtainSupportedCodesets () {
  VerifyProg "$CSMNORM" && {
    set -- `"$CSMNORM" CODESET`
    while [ $# -gt 1 ]; do
      echo $1; shift 2
    done
  }
}

EntryPoint () {
  [ "${DebugLevel:=0}" -ge "${1:-1}" ] && {
    echo 'echo "[Function: $0]" 1>&2; set -xv'
  }
}

CSMNORM=/usr/lib/csm/bin/csmnorm
Norm () {
  if [ -x "$CSMNORM" ]; then
    "$CSMNORM" $*
  else
    echo $2
  fi
  return $?
}

AwkLibrary='
  function norm(str){
    while(substr(str,1,1)==" ") str = substr(str,2);
    while(substr(str,length(str),1)==" ")
      str = substr(str,1,length(str)-1)
    return str
  }
'

trap CleanUp 0 $SigList
[ "$ShowProdStamp" = YES ] &&  ShowMsg "$PRODSTAMP"

main "$@"
exit $?

#############
# TEMPLATES #
#############

Fun () {
  eval `EntryPoint 5`
  return 0
}

$AWK '
  '"$AwkLibrary"'
'

#############
#############
