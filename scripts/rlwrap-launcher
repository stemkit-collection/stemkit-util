#!/usr/bin/env ruby
=begin
  vim: set sw=2:
  Copyright (c) 2009, Quest Software, http://www.quest.com
  
  ALL RIGHTS RESERVED.
  
  This software is the confidential and proprietary information of
  Quest Software Inc. ("Confidential Information"). You shall not
  disclose such Confidential Information and shall use it only in
  accordance with the terms of the license agreement you entered
  into with Quest Software Inc.
  
  QUEST SOFTWARE INC. MAKES NO REPRESENTATIONS OR
  WARRANTIES ABOUT THE SUITABILITY OF THE SOFTWARE,
  EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
  FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. QUEST
  SOFTWARE SHALL NOT BE LIABLE FOR ANY DAMAGES
  SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
  OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
  
  Author: Gennady Bystritsky (gennady.bystritsky@quest.com)
=end

$:.concat ENV['PATH'].to_s.split(File::PATH_SEPARATOR)

require 'tsc/application.rb'
require 'tsc/path.rb'

class Application < TSC::Application
  def start
    handle_errors {
      require 'pathname'
      script_realpath = Pathname.new($0).realpath
      invoke TSC::PATH.current.find_all(script_name).detect { |_item|
        _item.realpath != script_realpath
      }
    }
  end

  def invoke(path)
    raise "No #{script_name.inspect} in PATH" unless path
    exec 'rlwrap', path, *ARGV
  end

  in_generator_context do |_content|
    _content << '#!' + figure_ruby_path
    _content << '$VERBOSE = nil'
    _content << TSC::PATH.current.front(File.dirname(figure_ruby_path)).to_ruby_eval
    _content << IO.readlines(__FILE__).slice(1..-1)
  end
end

unless defined? Test::Unit::TestCase
  catch :TEST do
    Application.new.start
    exit 0
  end
end

require 'rubygems'
require 'test/unit'

require 'mocha'
require 'stubba'

class ApplicationTest < Test::Unit::TestCase
  attr_reader :app

  def test_nothing
  end

  def setup
    @app = Application.new
  end
end
