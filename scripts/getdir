#!/usr/bin/env ruby
# vim: sw=2:

if defined? Installation::Generator
  class Generator < Installation::Generator
    def create(io)
      bindir = File.join(self.class.installation_tools, 'bin')
      [
        '#!' + File.join(bindir, 'ruby'),
        "ENV['PATH'] = [ #{bindir.inspect}, *ENV.to_hash['PATH'].split(':') ].join(':')"
      ] + IO::readlines(__FILE__).slice(1..-1)
    end
  end

  throw :generator, Generator
end

[ 'tsc/application.rb' ].each do |a|
  $: << ENV.to_hash['PATH'].split(':').find { |p| Dir[ p + '/' + a ].first }
  require a
end

class Application < TSC::Application
  def initialize
    super((scopedirs + topscopedirs + [ 'lib', 'inc' ]).join('|'))
  end

  def main
    start do
      raise TSC::UsageError, 'No scope directory specified' unless ARGV.size == 1
      puts File.join(process(ARGV.first).flatten)
    end
  end

  private
  #######

  def process(directory)
    TSC::Error.wrap_with directory do
      case directory
        when 'lib'
          src_subscope('lib', 'include')
        when 'include', 'inc'
          src_subscope('include', 'lib')
        when *scopedirs
          [ scope.first, directory, scope.last ]
        when *topscopedirs
          [ scope.first, directory[3 .. -1] ]
        else
          raise TSC::UsageError, 'Wrong scope'
      end
    end
  end

  def scopedirs
    %w[ src bin dst pkg doc gen ]
  end

  def topscopedirs
    scopedirs.map { |_dir| 'top' + _dir }
  end

  def src_subscope(*components)
    result = separate_or_call(scope.last, components) {
      return [ scope.first, 'src', scope.last ]
    }
    [ scope.first, 'src', result.first, components.first, result.last ]
  end

  def scope
    @scope ||= separate_or_call(cwd, scopedirs) {
      raise 'Not in project scope'
    }
  end

  def separate_or_call(source, components, &block)
    components.each do |_item|
      index = source.rindex(_item)
      return [ source[0, index], _item, source[index.next .. -1] ] if index
    end
    block && block.call
  end

  def cwd
    @cwd ||= Dir.getwd.split(File::SEPARATOR)
  end
end

Application.new.main
