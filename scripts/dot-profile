# vim: ft=sh: sw=2:

HISTFILE="/tmp/sh.history.${LOGNAME}"

eval <<'RUBY'
  $VERBOSE = nil

  $:.concat Dir["projects/runtime/*/default/scripts"]
  require 'sk/shell/profile.rb'

  exit SK::Shell::Profile.new.send(*ARGV) { |_config|
    _config.path.before = %w{
      #{home}/projects/runtime/*/default/scripts
    }
    _config.manpath.after = %w{
      #{home}/man
    }
  }
RUBY

__END__() {
  true
}
__END__

profile_main()
{
  case "${ENV}" in
    */.profile)
      act_as_rc
    ;;
    *)
      ENV="${HOME}/.profile" export ENV

      tty -s && {
        act_as_profile
      }
    ;;
  esac

  for f in profile_main act_as_profile act_as_rc profile_find_ruby profile_eval_ruby; do
    eval "${f}() { echo '${f}: Already done' 1>&2; false; }"
  done
}

profile_find_ruby()
{
  exec 2>/dev/null
  for item in "${@}"; do
    ruby="${item}/ruby"
    [ "`${ruby} -rubygems -e 'puts %q{HELLO}'`" = 'HELLO' ] && {
      echo ${ruby}
      return 0
    }
  done
  return 1
}

profile_eval_ruby()
{
  eval `${1:-"ruby"} -rubygems "${ENV}" start`
}

act_as_profile()
{
  profile_eval_ruby `profile_find_ruby /opt/*/bin /opt/*/platform/*/ruby-*/bin ${HOME}/local/platform/*/bin /usr/local/bin /usr/bin`

  INPUTRC=~/.inputrc export INPUTRC
  JINDENT_PROPERTY="$HOME/.jindent" export JINDENT_PROPERTY
  EXINIT="so $HOME/.exrc" export EXINIT
  P4PORT=localhost:1 export P4PORT
  P4CONFIG=.p4config export P4CONFIG
  PAGER=less export PAGER
  LESS=-XMFRe export LESS
  HISTSIZE=1000 export HISTSIZE
  export HISTFILE
  RI=-fansi export RI
  PATH_WINDOWS=/dev/fs/C/WINDOWS/system32/.com,.exe,.ksh,.bat,.cmd,:/dev/fs/C/SFU-ROOT/common/.com,.exe,.ksh,.bat,.cmd,
  export PATH_WINDOWS

  SQLPATH="${HOME}/.sqlplus" export SQLPATH

  umask 2
  mesg y

  stty intr ^c susp ^z kill ^u eol ^w erase ^h tostop
  stty -tabs 2>/dev/null

  case "${SHELL}" in
    */ksh)
      [ "${HISTFILE:+set}" = set ] && {
        [ -f "${HISTFILE}" ] || touch "${HISTFILE}"
      }
      exec "${SHELL}" -o ignoreeof -o noclobber -o vi
    ;;
  esac
}

act_as_rc()
{
  while true; do
    case "${SHELL:=/bin/ksh}" in
      */bash | */ksh)
        [ -o monitor -o -o interactive ] || {
          break
        }
        [ "${USERENV:+set}" = set ] && {
          : ${env:="${ENV}"} ${userenv:="${USERENV}"}
          . "${USERENV}"
          export ENV="${env}" USERENV="${userenv}"
          unset env userenv
        }
        unalias cd chdir CD up jj del h rm p dir ll showdir vi
        [ "${SHELLDEPTH:+set}" != set ] && {
          alias bye=exit
          alias logout=exit

          set -o ignoreeof
        }
      ;;
    esac

    update_columns() {
      columns=`stty -a | sed -n 's/^.*columns[^0-9]* \([0-9][0-9]*\).*$/\1/p'`
      [ "${columns:+set}" != set ] && {
        columns=`stty -a | sed -n 's/^.* \([0-9][0-9]*\) columns.*$/\1/p'`
      }
      export COLUMNS="${columns:-80}"
      export COLS="${COLUMNS}"

      unset columns
    }

    __showdir__() {
      [ "${#}" -le 1 ] && {
        echo Current directory is `pwd`
      }
      update_columns
      ls "${@}"
    }

    __dir__() {
      __showdir__ -axF "${@}" | ${PAGER:-cat}
    }

    __ll__() {
      __showdir__ -al "${@}" | ${PAGER:-cat}
    }

    __original_cd__() {
      cd "${@}"
    }

    __cd__() {
      cd "${@}" && __dir__
    }

    __cdc__ () {
      __cdc__=`"${@:-pwd}"` && __cd__ "${__cdc__}"
    }

    __cdp__ () {
      __cdc__ getdir "${@:-src}"
    }

    __cdws__ () {
      __cdws_from_top__=`git from-top` || {
        return "${?}"
      }

      __cdws_ws__=`git ws`

      [ "${#}" -eq 0 ] && {
        __cd__ "${__cdws_ws__}"
        return "${?}"
      }

      __cdws_target__=`__original_cd__ "${__cdws_ws__}" && git tt top 2>/dev/null | while read line; do
        case "${line}" in
          ${__cdws_ws__}/${1}/*)
            echo ${line}
          ;;
        esac
      done`

      [ "${__cdws_target__:+set}" != set ] && {
        ( echo "No workspace \"${1}\" in ${__ws__}"
          echo "Available workspaces:"

          __original_cd__ "${__cdws_ws__}" && {
            git tt top 2>/dev/null | sed -n 's#^'"${__cdws_ws__}"'/\([^/]*\)/.*$#  \1#p'
          }
        ) 1>&2

        return 3
      }

      __cdws_sibling__="${__cdws_target__}/${__cdws_from_top__}"

      if [ -d "${__cdws_sibling__}" ]; then
        __cd__ "${__cdws_sibling__}"
      else
        __cd__ "${__cdws_target__}"
      fi
    }

    dirtree() {
      ls -R "${@}" | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'
    }

    ptweak() {
      [ "${#}" -eq 2 ] || {
        echo "USAGE: ptweak <product> <new version>"
        return 1
      }
      product="${1}"
      version="${2}"

      export PATH=`echo ${PATH} | sed "s#/${product}/[^/:]*#/${product}/${version}#g"`

      IFS=':'
      set -- ${PATH}
      unset IFS

      for path in "${@}"; do
        case "${path}" in
          */${product}/*)
            echo "${path}"
          ;;
        esac
      done
    }

    pchange() {
      [ "${#}" -eq 2 ] || {
        echo "USAGE: pchange <from> <to> (${#})"
        return 1
      }
      from="${1}"
      to="${2}"

      export PATH=`echo ${PATH} | sed "s#${from}#${to}#g"`

      IFS=':'
      set -- ${PATH}
      unset IFS

      for path in "${@}"; do
        case "${path}" in
          *${to}*)
            echo "${path}"
          ;;
        esac
      done
    }

    CDPATH=".:${HOME}:${HOME}/projects:${HOME}/projects/sf:${HOME}/local/${SYSID}" export CDPATH
    EDITOR=vim export EDITOR
    VISUAL=vim export VISUAL

    PROFILE_LOCAL="${HOME}/.profile-local"
    [ -f "${PROFILE_LOCAL}" ] && . "${PROFILE_LOCAL}"

    PS1="[${SYSID}.${SERVER}:!]${PROMPT:-${USER}}${SHELLDEPTH:+_${SHELLDEPTH}}> "
    [ "${TERM}" = xterm ] && {
      PS1=`printf "\033]0;${PROMPT:-${USER}}@${SYSID}-${SERVER}\07\r"`"${PS1}"
    }
    export SHELLDEPTH=`expr "${SHELLDEPTH:-0}" + 1`
    PS2="(cont) "

    update_columns

    case "${SHELL}" in
      */bash | */ksh)
        alias vi="${EDITOR:-vim}"
        alias h=history
        alias rm='rm -i'
        alias del=/bin/rm
        alias jj=jobs
        alias p='echo ${PWD}'
        alias !!=r
        alias !=r
        alias pg=less
        alias more=less

        alias 'cd=__cd__'
        alias 'cdc=__cdc__'
        alias 'cdp=__cdp__'
        alias 'cdws=__cdws__'
        alias 'cdw=__cdws__'

        alias 'chdir=__original_cd__'
        alias 'dir=__dir__'
        alias 'll=__ll__'

        alias "__D="
        alias "__C="
        alias "__A="
        alias "__B="
        alias "__O="

        set -o noclobber
        set -o vi
      ;;
    esac

    [ "${home:+set}" = set ] && {
      export HOME="${home}"
    }
    break
  done
}

profile_main "${@}"

[ "${SHELLDEPTH:-1}" = 1 ] && {
  trap '__original_cd__ '"${HOME}"' && ruby '"${ENV}"' stop ${SECONDS:-0}' EXIT
}

true
