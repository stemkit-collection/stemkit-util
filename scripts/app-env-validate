#!/usr/bin/env ruby
=begin
  vim: sw=2:
  Copyright (c) 2012, Gennady Bystritsky <bystr@mac.com>

  Distributed under the MIT Licence.
  This is free software. See 'LICENSE' for details.
  You must read and accept the license prior to use.

  Author: Gennady Bystritsky <bystr@mac.com>
=end

$:.concat ENV['PATH'].to_s.split(File::PATH_SEPARATOR)

require 'tsc/application.rb'
require 'tsc/path.rb'
require 'tsc/launch.rb'

class Application < TSC::Application
  def initialize
    super { |_config|
      _config.arguments = '<env-tag>'
      _config.options = [
        [ '--quiet', 'No output, just an exit code', nil, '-q' ],
        [ '--product', 'Product name', 'name', '-p' ],
        [ '--info', 'Info utility to check for product version', 'name', '-i' ]
      ]
      _config.description = [
        'Enusres validity of the current enviroment'
      ]
    }
  end

  def start
    handle_errors {
      process_command_line

      require 'rubygems'
      require 'pathname'
      require 'yaml'

      raise TSC::UsageError unless ARGV.empty?

      perform_validation
    }
  end

  def separator
    @separator ||= begin
      tag
      @separator || '-'
    end
  end

  def components
    @components ||= begin
      tag
      @components || []
    end
  end

  def tag
    @tag ||= catch :tag do
      script_name.split(%r{([-_])}).tap do |_items|
        break unless _items.pop == 'validate'
        break if _items.empty?

        Array(_items.each_slice(2)).transpose.tap do |_components, _separators|
          _components.pop if _components.last == 'env'

          @components = _components
          @separator = _separators.last

          throw :tag, _components.join(separator)
        end
      end

      raise "Wrong validation utility name: #{script_name.inspect}"
    end
  end

  def product
    @product ||= options.product || begin
      raise 'Product not specified and cannot be figured' unless components.empty?
      components.join.downcase
    end
  end

  def product_env_components
    @product_env_components ||= begin
      raise 'Product env components cannot be figured' if components.empty?
      (components + [ 'v' ]).map(&:upcase)
    end
  end

  def current_product_version
    raise catch(:error) {
      current_product_info { |_info|
        throw :error, 'Invalid product info' unless Hash === _info
        _info.each do |_product, _data|
          if _product.downcase == product
            if Hash === _data
              return _data['Version'] || begin
                throw :error, "No version for product #{_product.inspect}"
              end
            end

            throw :error, "Invalid info block for product #{_product.inspect}"
          end
        end
      }
      throw :error, "Product info not found for #{product.inspect}"
    }
  end

  def current_product_info
    yield YAML.parse(launch(info).join("\n")).tap { |_data|
      break {} unless _data
      break _data.transform
    }
  end

  def info
    @info ||= [ tag, 'info' ].join(separator)
  end

  def perform_validation
    ENV[product_env_components.join('_')].tap do |_value|
      case _value
        when nil, '', 'off'
          return

        when 'on'
          next

        else
          current_product_version.tap do |_version|
            raise "#{tag}: Version mismatch: need #{_value}, found #{_version}" unless _version == _value
            puts "#{tag}: Version validated: #{actual_version}" unless options.quiet
          end
      end
    end

    raise 'Facility validation failed' unless system('app-env', 'true')
  end

  in_generator_context do |_content|
    _content << '#!' + figure_ruby_path
    _content << '$VERBOSE = nil'
    _content << TSC::PATH.current.front(File.dirname(figure_ruby_path)).to_ruby_eval
    _content << IO.readlines(__FILE__).slice(1..-1)
  end
end

unless defined? Test::Unit::TestCase
  catch :TEST do
    Application.new.start
    exit 0
  end
end

require 'rubygems'
require 'test/unit'
require 'mocha'

class ApplicationTest < Test::Unit::TestCase
  attr_reader :app

  def test_nothing
  end

  def setup
    @app = Application.new
  end
end
