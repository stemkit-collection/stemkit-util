#!/bin/ksh
    IDENT="@(#)Title:     CD(ISO9660) to UNIX tree linker."
   AUTHOR="@(#)Author:    Gennady F. Bystritsky (bystr@florin.ru)"
  VERSION="@(#)Version:   1.3"
COPYRIGHT="@(#)Copyright: DataX/FLORIN, Inc. (1996-1997)"
PRODSTAMP="
#####################################################################
# CDROM Directory Tree Linker. Copyright(c) 1996 DataX/FLORIN, Inc. #
#####################################################################
"
unset ERRLOG
LANG=C export LANG

DevelopmentHistory () {
  echo '
  DEVELOPMENT HISTORY:

    Ver. 1.0:
      o Recognizes file types 'F' (ordinary) and 'D' (directory)

    Ver. 1.1:
      o Recognizes file types 'L' (symbolic link) and 'M' (moved
        directory)
      o Handles true CD-ROM names (e.g. "FILE.EXT;1")

    Ver. 1.2:
      o An error is corrected while handling true CD-ROM names (symbol ";" 
        in a file name was erroneously enterpreted as a command separator)
      o Now file "ymtrans.tbl" is found properly in case it is in true 
        CD-ROM file name form (e.g "YMTRANS.TBL;1");

    Ver. 1.3:
      o New feature is introduced: when there in a directory is a file named 
        ".Platform-Specific.sh" this file is executed as a shell script and
        then removed. It makes it possible to run certain commands after
        directory tree is linked (or copied). First the feature was used 
        for HP-UX 10.x distribution (file "catalog/swlock" is made "local",
        i.e. not on CD-ROM filesystem)
      o Development history account is held in the script itself and a new
        option "-h" introduced to view it.
  '
}

RedirectErrors=YES
 ShowProdStamp=YES
       SigList="1 2 3 8 15"

PrintUsage () {
  ShowMsg \
    "USAGE: $ScriptName [-x<debug level>]{[-hcl] <src> <dst>}|{-m <src>}"
}

   TRANSTBL="ymtrans.tbl"
POSTPROCESS=".Platform-Specific.sh"

main () {
  CMD="ln -s"; ACT="Linking"; ARGS=2
  [ $# -eq 0 ] || {
    while getopts "x:mrclh" opt; do
      case "$opt" in
        x)
          DebugLevel=$OPTARG
        ;;
        m|r) 
          CMD="mv"; ACT="Renaming"; ARGS=1
        ;;
        c) 
          CMD="cp"; ACT="Copying" 
        ;;
        l) 
          CMD="ln -s"; ACT="Linking" 
        ;;
        h)
          DevelopmentHistory; exit 0;
        ;;
        *) 
          PrintUsage; return 2
        ;;
      esac
    done
    shift `expr $OPTIND - 1`
  }
  eval `EntryPoint 1`

  [ $# -eq "$ARGS" ] || {
    PrintUsage; return 2
  }
  argc=0
  while [ "$argc" -lt "$ARGS" ]; do
    argc=`expr "$argc" + 1`
    case "$argc" in
      1)
        SOURCE=`GenDirPath "$1"`
        [ "${SOURCE:+set}" = set ] || {
          ErrMsg "Bad source directory \"$SOURCE\"."
          return 3
        }
        DEST=$SOURCE
      ;;
      2)
        DEST=$1
        mkdir "$DEST" 2>/dev/null || {
          ErrMsg "Cannot create directory \"$DEST\" (it may exist)."
          return 4
        }
        DEST=`GenDirPath $DEST`
        [ "${DEST:+set}" = set ] || {
          ErrMsg "Bad destination directory \"$DEST\"."
          return 4
        }
        [ "$DEST" = "$SOURCE" ] && {
          ErrMsg "Source and destination are identical !!!"
          return 5
        }
      ;;
    esac
    shift
  done
  ShowMsg "\"$SOURCE\" -> \"$DEST\""
  find "$SOURCE" -type d -depth -print | {
    HandleTree | ShowProgress "  $ACT" 65
  }
  return 0
}

HandleTree () {
  status=0
  while read line; do
    dir=`echo $line|sed "s#^$SOURCE/\{0,1\}##g"`
    mkdir -p "$DEST/$dir" >/dev/null 2>&1
    : ${dir:=.}
    cd "$line"
    ls -1a|$AWK '
      NF>0{
        canonical=tolower($0)
        sub(";[0-9]*$","",canonical);
        sub("[.]$","",canonical);
        n_coresp[canonical] = $0
      }
      END{
        n_coresp["symbolic"] = "symbolic"
        transtbl = n_coresp["'"$TRANSTBL"'"];
        if(system("[ -f \"" transtbl "\" ]")==0){
          while((getline<transtbl)>0){
            if(NF>=3 && real_name=n_coresp[$2]){
              $2 = real_name; print
            }
          }
          close transtbl
          printf "delete %s %s\n",transtbl,"'"$TRANSTBL"'"
        }
      }
    '|{
      trap "" $SigList
      while read line; do
        set -- $line
        TYPE="$1"; CANON="$2"; REAL="$3"; ORIGINAL="$4"
        case "$TYPE" in
          delete)
            [ "$CMD" = mv ] && rm -f "$SOURCE/$dir/$CANON"
          ;;
          F)
            [ "$SOURCE/$dir/$CANON" = "$DEST/$dir/$REAL" ] || {
              VerifyFile "$CANON" && {
                echo "echo \"$DEST/$dir/$REAL/\"; \c"
                echo "$CMD \"$SOURCE/$dir/$CANON\" \"$DEST/$dir/$REAL\""
                [ "$REAL" = "$POSTPROCESS" ] && {
                  [ "$CMD" = mv ] || {
                    echo "echo zzzzzzzzzzzzzzzzzzz; \c"
                    echo "sh \"$DEST/$dir/$REAL\"; \c"
                    echo "rm -f \"$DEST/$dir/$REAL\""
                  }
                }
              }
            }
          ;;
          D)
            VerifyDir "$CANON" && [ "$CANON" != "$REAL" ] && {
              echo "echo \"$DEST/$dir/$REAL/\"; \c"
              echo "mv \"$DEST/$dir/$CANON\" \"$DEST/$dir/$REAL\""
            }
          ;;
          M)
            VerifyDir "$CANON" && {
              echo "echo \"$DEST/$dir/$ORIGINAL/\"; \c"
              echo "mv \"$DEST/$dir/$CANON\" \"$DEST/$dir/$ORIGINAL\""
            }
          ;;
          L)
            cd `dirname "$DEST/$ORIGINAL"` && {
              echo "echo \"$DEST/$ORIGINAL/\"; \c"
              echo "ln -s \"$REAL\" \"$DEST/$ORIGINAL\""
            }
          ;;
        esac
      done|sort|$SHELL
      trap $SigList
    }
  done
  return $status
}

CleanUp () {
  eval `EntryPoint 1`

  [ "${ERRLOG:+set}" = set ] && {
    exec 1>&3 2>&4
    [ -s "$ERRLOG" ] && {
      echo "\n$ScriptName: Output to log occurred\n==="
      cat "$ERRLOG"
    }|pg -en
    rm -rf "$ERRLOG"
  }
}

##################
# Script Library #
##################

ScriptName=`basename $0 .sh`; status=0; umask 0
AWK=nawk; { $AWK ''; } >/dev/null 2>&1 || AWK=awk

> "${ERRLOG:=/tmp/$ScriptName.$$.log}"
exec 3>&1 4>&2 
[ "$RedirectErrors" = YES ] && exec 2>"$ERRLOG" 1>&2

UPPER="[A-Z]"; LOWER="[a-z]"
tr "[A-Z]" "[a-z]" </dev/null 1>&0 2>&1 || {
  UPPER="[:upper:]"; LOWER="[:lower:]"
}

tolower () {
  echo $*|tr "$UPPER" "$LOWER"
}

toupper () {
  echo $*|tr "$LOWER" "$UPPER"
}

ErrMsg () {
  echo "$ScriptName: $*" 1>&4 2>&1
}

ShowMsg () {
  echo "$*" 1>&3 2>&4
}

GenDirPath () {
  [ $# -eq 1 ] && {
    (cd "$1">/dev/null 2>&1  && pwd)
  }
  return $?
}

ShowProgress () {
  cnt=0; max=${2:-75}
  while read line;do
    [ "$cnt" -eq 0 ] && ShowMsg "${1:-Doing} \c"
    ShowMsg ".\c"; cnt=`expr $cnt + 1`
    [ $cnt -gt "$max" ] && {
      cnt=0; ShowMsg;
    }
  done
  [ $cnt -eq 0 ] || ShowMsg
}

PrintVars () {
  for v in $*
  do
    eval echo $v=\$$v
  done
}

VerifyFile () {
  eval test -f \"$1\" -a -r \"$1\"; return $?
}

VerifyDir () {
  eval test -d \"$1\" -a -r \"$1\"; return $?
}

VerifyProg () {
  eval test -f \"$1\" -a -x \"$1\"; return $?
}

ExtractValues () {
  [ $# -gt 1 ] && {
    file=$1; unset pattern; shift
    for arg
    do
      arg=`echo $arg|sed -n '/^[a-zA-Z][a-zA-Z1-9_]*$/p'`
      [ "${arg:+set}" = set ] && {
        [ "${pattern:+set}" = set ] && {
          pattern="${pattern};"
        }
        search='^[ 	]*'"${arg}"'=\([^`;]*\)[ 	]*$'
        replace="${arg}="\''\1'\'
        pattern="${pattern}s/$search/$replace/gp"
      }
    done
    [ "${pattern:+set}" = set ] && VerifyFile "$file" && {
      eval `sed -n "$pattern"<"$file"`
    }
  }
}

ObtainSupportedCodesets () {
  VerifyProg "$CSMNORM" && {
    set -- `"$CSMNORM" CODESET`
    while [ $# -gt 1 ]; do
      echo $1; shift 2
    done
  }
}

EntryPoint () {
  [ "${DebugLevel:=0}" -ge "${1:-1}" ] && {
    echo 'echo "[Function: $0]" 1>&2; set -xv'
  }
}

CSMNORM=/usr/lib/csm/bin/csmnorm
Norm () {
  if [ -x "$CSMNORM" ]; then
    "$CSMNORM" $*
  else
    echo $2
  fi
  return $?
}

AwkLibrary='
  function norm(str){
    while(substr(str,1,1)==" ") str = substr(str,2);
    while(substr(str,length(str),1)==" ")
      str = substr(str,1,length(str)-1)
    return str
  }
'

trap CleanUp 0 $SigList
[ "$ShowProdStamp" = YES ] &&  ShowMsg "$PRODSTAMP"

main "$@"
exit $?

#############
# TEMPLATES #
#############

Fun () {
  eval `EntryPoint 5`
  return 0
}

$AWK '
  '"$AwkLibrary"'
'

#############
#############
