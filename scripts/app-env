#!/usr/bin/env ruby
=begin
  vim: sw=2:
  Copyright (c) 2012, Gennady Bystritsky <bystr@mac.com>

  Distributed under the MIT Licence.
  This is free software. See 'LICENSE' for details.
  You must read and accept the license prior to use.

  Author: Gennady Bystritsky
=end

$:.concat ENV['PATH'].to_s.split(File::PATH_SEPARATOR)

require 'tsc/application.rb'
require 'tsc/path.rb'

class Application < TSC::Application
  in_generator_context do |_content|
    File.join(self.class.installation_top, 'bin').tap { |_directory|
      _content << '#!/usr/bin/env ' + figure_ruby_path
      _content << TSC::PATH.current.front(_directory).to_ruby_eval
      _content << "PLATFORM_TOP = #{self.class.installation_parameters[:platform_top].to_s.inspect}"
    }
    _content << IO.readlines(__FILE__).slice(1..-1)
  end

  def start
    handle_errors {
      TSC::LD_LIBRARY_PATH.current.back(top('lib64')).install
      exec *[ locate(facility), ARGV ].flatten
    }
  end

  private
  #######

  def locate(command)
    [ top('bin'), *ENV['PATH'].to_s.split(File::PATH_SEPARATOR) ].each do |_location|
      Dir[ File.join(_location, command) ].each do |_item|
        return _item unless _item == $0
      end
    end

    raise "Launching target not found: #{command}"
  end

  def facility
    return script_name unless script_name == 'app-env'
    return ARGV.shift unless ARGV.empty?

    raise 'No facility specified'
  end

  def top(*args)
    platform_top.join(*args).to_s
  end

  def platform_top
    @platform_top ||= figure_platform_top
  end

  def figure_platform_top
    return Pathname.new(PLATFORM_TOP) if defined? PLATFORM_TOP

    raise 'Platform top cannot be determined: ' + begin
      find_in_path('ruby').first.tap { |_path|
        break 'no ruby in PATH' unless _path
        break Pathname.new(_path).parent.parent.tap { |_top|
          return _top if _top.parent.basename.to_s == 'platform'
          break 'not platform bound ruby'
        }
      }
    end
  end
end

Application.new.start
