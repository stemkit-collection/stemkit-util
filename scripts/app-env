#!/usr/bin/env ruby
=begin
  vim: sw=2:
  Copyright (c) 2012, Gennady Bystritsky <bystr@mac.com>

  Distributed under the MIT Licence.
  This is free software. See 'LICENSE' for details.
  You must read and accept the license prior to use.

  Author: Gennady Bystritsky
=end

$:.concat ENV['PATH'].to_s.split(File::PATH_SEPARATOR)

require 'tsc/application.rb'
require 'tsc/path.rb'

class Application < TSC::Application
  in_generator_context do |_content|
    _content << '#!/usr/bin/env ' + figure_ruby_path
    _content << '$LOAD_PATH.unshift ' + File.dirname(figure_ruby_path).inspect
    _content << 'PLATFORM_TOP = ' + self.class.installation_parameters[:platform_top].inspect
    _content << 'TOOL_LABEL = ' + self.class.installation_parameters[:tool_label].inspect
    _content << 'TOP = ' + File.join(self.class.installation_top, 'bin').inspect

    _content << IO.readlines(__FILE__).slice(1..-1)
  end

  def start
    handle_errors do
      require 'pathname'

      TSC::LD_LIBRARY_PATH.current.back(top('lib64'), top('lib')).install
      launch *facility(script_name, *ARGV)
    end
  end

  private
  #######

  def tool_label
    @tool_label ||= defined?(TOOL_LABEL) ? TOOL_LABEL : 'app-env'
  end

  def launch(command, *args)
    app_env_path.front(top(@folder, 'bin')).install if @folder
    system_path.front(top('bin')) unless system_path.entries.include?(top('bin'))

    system_path.front app_env_path.entries.reverse
    system_path.front TOP if defined? TOP

    system_path.entries.each do |_location|
      Dir[ File.join(_location, command) ].each do |_item|
        next if _item == $0
        next if defined?(TOP) and _item == File.join(TOP, script_name)

        system_path.install
        exec _item, *args
      end
    end

    raise "Launching target not found: #{command}"
  end

  def exec(*args)
    puts "### #{args.join(' ')}" if verbose?
    Kernel.exec *args
  end

  def app_env_path
    @app_env_path ||= TSC::Path['APP_ENV_PATH'].load
  end

  def system_path
    @system_path ||= TSC::PATH.new.load
  end

  def facility(*args)
    until args.empty?
      break nil unless args.shift.tap do |_item|
        case _item
          when %r{^([^-]+)-([^-]+)$}
            lastenv = ($2 == 'env' ? true : false)
            @env = true if lastenv

            next if $1 == 'app' and lastenv
            @facility = $1

            unless lastenv
              if @env
                @folder = _item
              else
                args.unshift $2, @facility
              end
            end

          when %r{^\d+([.]\d+)+$}
            break nil unless @facility
            @folder = @facility + '-' + _item

          else
            return _item, *args
        end
      end
    end

    raise 'No facility specified'
  end

  def top(*args)
    platform_top.join(*args.flatten.compact).to_s
  end

  def platform_top
    @platform_top ||= figure_platform_top
  end

  def figure_platform_top
    return Pathname.new(PLATFORM_TOP) if defined? PLATFORM_TOP

    raise 'Platform top cannot be determined: ' + begin
      find_in_path('ruby').first.tap { |_path|
        break 'no ruby in PATH' unless _path
        break Pathname.new(_path).parent.parent.tap { |_top|
          return _top if _top.parent.basename.to_s == 'platform'
          break 'not platform bound ruby'
        }
      }
    end
  end
end

Application.new.start
