#!/usr/bin/env ruby
# Copyright (c) 2005, Gennady Bystritsky <bystr@mac.com>
# 
# Distributed under the MIT Licence.
# This is free software. See 'LICENSE' for details.
# You must read and accept the license prior to use.

if defined? Installation::Generator
  class Generator < Installation::Generator
    def create(io)
      bindir = File.join(self.class.installation_tools, 'bin')
      [
        '#!' + File.join(bindir, 'ruby'),
        "ENV['PATH'] = [ #{bindir.inspect}, *ENV.to_hash['PATH'].split(':') ].join(':')"
      ] + IO::readlines(__FILE__).slice(1..-1)
    end
  end

  throw :generator, Generator
end

[ 'tsc/application.rb' ].each do |a|
  $: << ENV.to_hash['PATH'].split(':').find { |p| Dir[ p + '/' + a ].first }
  require a
end

class Application < TSC::Application
  def initialize
    super('<parameter> ...',
      [ '--path', 'SVN Repository path', 'path', '-p' ],
      [ '--revision', 'SVN revision number', 'number', '-r' ],
      [ '--config', 'Configuration file', 'path', '-c' ],
      [ '--test', 'Run internal tests', nil ]
    )
  end

  def start
    handle_errors {
      process_command_line
      localize_ruby_loadpath
      fix_environment

      require 'sk/svn/hook/manager.rb'
      require 'sk/svn/hook/config.rb'

      throw :TEST if options.has_key?('test')

      path = ARGV.shift || options['path'] or raise 'Repository path not specified'
      revision = ARGV.shift || options['revision'] or raise 'Revision not specified'

      base, depot = File.split(path)

      if base != config.repository_base
        raise 'Specified repository not under configured base location'
      end

      SK::Svn::Hook::Manager.new(script_name, config, depot).process(revision)
    }
  end

  private
  #######

  def fix_environment
    require 'etc'

    entry = Etc.getpwuid

    ENV['LOGNAME'] = entry.name
    ENV['HOME'] = entry.dir

    location = script_location

    if File.symlink?(__FILE__)
      location = File.dirname(File.readlink(__FILE__))
    end

    path = [ location, *ENV.to_hash['PATH'].split(':') ]
    ENV['PATH'] = path.join(':')

    $:.concat path
  end

  def config
    @config ||= begin
      SK::Svn::Hook::Config.new(options['config'] || File.expand_path("~/conf/#{script_name}.yaml"))
    end
  end
end

unless defined? Test::Unit::TestCase
  catch :TEST do
    Application.new.start
    exit 0
  end
end

require 'test/unit'

class ApplicationTest < Test::Unit::TestCase
  def test_something
    flunk 'Not implemented'
  end

  def setup
    @app = Application.new
  end

  def teardown
    @app = nil
  end
end
