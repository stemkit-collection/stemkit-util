#!/bin/ksh
PRODSTAMP="
########################################################
# Become a user. Copyright(c) 1997 Home Software, Inc. #
########################################################
"
RedirectErrors=YES
 ShowProdStamp=NO

PrintUsage () {
  ShowMsg "USAGE: $ScriptName [-x<debug level>] <user>" 1>&2
}

CleanUp () {
  eval `EntryPoint 3`
  [ "${ERRLOG:+set}" = set ] && rm -f "$ERRLOG"
}

main() 
{
  unset ERRLOG

  [ ${#} -eq 0 ] || {
    while getopts "x:" opt; do
      case "${opt}" in
        x)
          DebugLevel="${OPTARG}"
        ;;
        *) 
          PrintUsage
          return 2
        ;;
      esac
    done
    shift `expr $OPTIND - 1`
  }
  eval `EntryPoint 1`
  [ $# -ne 1 ] && {
    PrintUsage
    return 2
  }
  target="${1}"

  if is_local_environment "${target}"; then
    setup_local_environment "${target}"
  else
    setup_user "${target}"
  fi

}

environment_profile()
{
  eval `EntryPoint 5`
  echo "${HOME}/${1}/.profile.${1}"
}

is_local_environment()
{
  eval `EntryPoint 4`
  test -f `environment_profile ${1}`
}

setup_local_environment()
{
  eval `EntryPoint 3`

  profile=`environment_profile ${1}`
  HOME=`dirname ${profile}`

  cd "${HOME}" || {
    ErrMsg "Cannot setup local environment \"${1}\""
    return 3
  }
  OLDPATH="${PATH}"
  PATH=/bin:/usr/bin
  . /etc/profile

  exec 1>&3 2>&4

  kshrc="${ENV}"
  . "${profile}"

  PATH=`CheckPath "${OLDPATH}:${PATH}" | MergePath`

  userenv="${ENV}"
  [ "${userenv}" = "${kshrc}" ] && {
    unset userenv
  }
  HOME=`dirname ${profile}`
  export PATH HOME
  unset ENV USERENV

  exec 3>&- 4>&-
  exec env LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-} PATH=${PATH} ENV=${kshrc} USERENV=${userenv:-} ${SHELL:-ksh}
}

setup_user()
{
  eval `EntryPoint 3`

  NEWUSER="${1}"

  eval HOME=~$NEWUSER
  cd $HOME || {
    ErrMsg "User \"$NEWUSER\" unknown"
    return 3
  }
  HOME=`pwd`
  USER=$NEWUSER
  LOGNAME=$NEWUSER
  export USER HOME LOGNAME
  unset home
  OLDPATH="${PATH}"
  PATH=/bin:/usr/bin
  . /etc/profile
  USER=$NEWUSER
  LOGNAME=$NEWUSER
  exec 1>&3 2>&4 3>&- 4>&-

  kshrc="${ENV}"
  export USER HOME LOGNAME
  [ -f ./.profile ] && {
    . ./.profile 
  }
  USER=$NEWUSER
  LOGNAME=$NEWUSER
  export USER HOME LOGNAME

  PATH=`CheckPath "${OLDPATH}:${PATH}" | MergePath`

  userenv="${ENV}"
  [ "${userenv}" = "${kshrc}" ] && {
    unset userenv
  }
  export PATH
  unset ENV USERENV SHELLDEPTH
  exec su "${NEWUSER}" -c "
    exec env LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-} PATH=${PATH} HISTFILE=${HOME}/.sh_history ENV=${kshrc} USERENV=${userenv:-} ${SHELL:-ksh} -o vi
  "
  return 0
}

CheckPath() 
{
  set entry `echo "${@}" | sed 's/:/ /g'`
  shift

  for directory in "${@}"; do
    (cd "${directory}" && pwd) 2>/dev/null
  done
}

MergePath () {
  $AWK -F: '
    {
      for(cnt=1; cnt<=NF ;cnt++){
        if(present[$cnt]==0){
          path[comp++] = $cnt
          present[$cnt]++
        }
      }
    }
    END{
      for(cnt=0; cnt<comp ;cnt++){
        if(cnt!=0) printf ":"
        printf "%s",path[cnt]
      }
    }
  '
}

##################
# Script Library #
##################

ScriptName=`basename $0`; status=0; umask 0
AWK=nawk; { $AWK ''; } >/dev/null 2>&1 || AWK=awk

> "${ERRLOG:=/tmp/$ScriptName}"
exec 3>&1 4>&2 
[ "$RedirectErrors" = YES ] && exec 2>"$ERRLOG" 1>&2

UPPER="[A-Z]"; LOWER="[a-z]"
tr "[A-Z]" "[a-z]" </dev/null 1>&0 2>&1 || {
  UPPER="[:upper:]"; LOWER="[:lower:]"
}

tolower () {
  echo $*|tr "$UPPER" "$LOWER"
}

toupper () {
  echo $*|tr "$LOWER" "$UPPER"
}

ErrMsg () {
  echo "$ScriptName: $*" 1>&4 2>&1
}

ShowMsg () {
  echo "$*" 1>&3 2>&4
}

GenDirPath () {
  [ $# -eq 1 ] && {
    (cd "$1">/dev/null 2>&1  && pwd)
  }
  return $?
}

ShowProgress () {
  cnt=0; max=${2:-75}
  while read line;do
    [ "$cnt" -eq 0 ] && ShowMsg "${1:-Doing} \c"
    ShowMsg ".\c"; cnt=`expr $cnt + 1`
    [ $cnt -gt "$max" ] && {
      cnt=0; ShowMsg;
    }
  done
  [ $cnt -eq 0 ] || ShowMsg
}

PrintVars () {
  for v in $*
  do
    eval echo $v=\$$v
  done
}

VerifyDir () {
  eval test -d "$1" -a -r "$1"; return $?
}

VerifyFile () {
  eval test -f "$1" -a -r "$1"; return $?
}

VerifyProg () {
  eval test -f "$1" -a -x "$1"; return $?
}

ExtractValues () {
  [ $# -gt 1 ] && {
    file=$1; unset pattern; shift
    for arg
    do
      arg=`echo $arg|sed -n '/^[a-zA-Z][a-zA-Z1-9_]*$/p'`
      [ "${arg:+set}" = set ] && {
        [ "${pattern:+set}" = set ] && {
          pattern="${pattern};"
        }
        search='^[ 	]*'"${arg}"'=\([^`;]*\)[ 	]*$'
        replace="${arg}="\''\1'\'
        pattern="${pattern}s/$search/$replace/gp"
      }
    done
    [ "${pattern:+set}" = set ] && VerifyFile "$file" && {
      eval `sed -n "$pattern"<"$file"`
    }
  }
}

ObtainSupportedCodesets () {
  VerifyProg "$CSMNORM" && {
    set -- `"$CSMNORM" CODESET`
    while [ $# -gt 1 ]; do
      echo $1; shift 2
    done
  }
}

EntryPoint () {
  [ "${DebugLevel:=0}" -ge "${1:-1}" ] && {
    echo 'echo "[Function: $0]" 1>&2; set -xv'
  }
}

CSMNORM=/usr/lib/csm/bin/csmnorm
Norm () {
  if [ -x "$CSMNORM" ]; then
    "$CSMNORM" $*
  else
    echo $2
  fi
  return $?
}

AwkLibrary='
  function norm(str){
    while(substr(str,1,1)==" ") str = substr(str,2);
    while(substr(str,length(str),1)==" ")
      str = substr(str,1,length(str)-1)
    return str
  }
'

trap CleanUp 0 1 2 3 
[ "$ShowProdStamp" = YES ] &&  ShowMsg "$PRODSTAMP"

main "$@"
exit $?

#############
# TEMPLATES #
#############

Fun () {
  eval `EntryPoint 5`
  return 0
}

$AWK '
  '"$AwkLibrary"'
'

#############
#############
