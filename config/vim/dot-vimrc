
:if has("terminfo")
:  set t_Co=8
:  set t_Sf=[3%p1%dm
:  set t_Sb=[4%p1%dm
:else
:  set t_Co=8
:  set t_Sf=[3%dm
:  set t_Sb=[4%dm
:endif

set nocompatible autowrite background=dark nowrap nohls
set showmode showmatch autoindent nowrapscan
set nobackup nowritebackup

set expandtab smarttab softtabstop=8
set tabstop=4 modelines=3 modeline sw=4
set ve=all

set hidden
set history=50
set viminfo='50,\"1000,%,n~/.viminfo

set ruler
set laststatus=2
set keywordprg=man\ -a
set bs=indent,start
set ttyfast

let g:netrw_dirhistmax = 0
let mysyntaxfile = "~/.vimsyntax"
syntax on

map  :set autoindent! cindent! autoindent?<CR>
map  1G!Gjindent<CR>
map  1G!Gjindent -p Sun-Style.jin<CR>

map == /^[ 	]*{<CR>z.$
map -- 0?^[ 	]*{<CR>z.$
map }} mn>'m'n
map {{ mn<'m'n

map gg :GtagsCursor<CR>

imap <C-L> <C-X><C-L>
imap <C-F> <C-X><C-F>

command Make set makeprg=make <Bar> make
command Jam  set makeprg=jam <Bar> make
command Xcode  set makeprg=xcode-build <Bar> make
command Test make test
command Open execute "!svn status \\%t"
command Revert execute "!svn revert %" <Bar> e
command Update execute "!svn update %" <Bar> e
command Commit execute "!svn commit %"
command Resolved execute "!svn resolved %"

command -nargs=* Gt execute "Gtags <args>"
command -nargs=* Gs execute "Gtags -s <args>"
command -nargs=* Gf execute "Gtags -P <args>"
command -nargs=* Gu execute "!global -u"

command -nargs=* Blame execute "!svn annotate % <args> | less"
command -nargs=* Diff execute "!svn diff % <args> | less"
command -nargs=* Log execute "!svn log % <args> | less"
command -nargs=* RTest execute "!ruby -rubygems -I${PATH} <args> % 2>&1 | less"
command -nargs=* JTest execute "!jruby -rubygems -I${PATH} -I lib -r java <args> % 2>&1 | less"
command -nargs=* RSpec execute "!ruby -rubygems -I${PATH} -S spec --require sk/spec/config -fs <args> % 2>&1 | less"

command -nargs=* MLocal execute "make -C %:h ITEMS=%:t:r DOALL=true <args> local-test"
command -nargs=* MUnit execute "make -C %:h/unit-tests ITEMS=%:t:r DOALL=true <args> local-test"
command -nargs=* MSpecs execute "make -C %:h/unit-tests ITEMS=%:t:r DOALL=true <args> local-spec"
command -nargs=* MDocs execute "make <args> docs install-docs"

"set shellpipe=2>&1\|sed\ \'s/:\ warning:/\ [WARNING]/g\'\|tee

command Syntax if exists("syntax_on") <Bar> syntax off <Bar> else <Bar> syntax on <Bar> endif
command Wrap set wrap!

map cc :cc<CR>
map cn :cn<CR>
map cp :cp<CR>
map cl :cl<CR>
map cm :Make<CR>
map cj :Jam<CR>
map ck :Xcode<CR>
map co :copen 5<CR>
map cs :cclose<CR>
map cd :Diff<CR>
map tt :Test<CR>

map <F1><F1> :help<CR>
map <F1>m :Make <CR>
map <F1>j :Jam<CR>
map <F1>t :Test<CR>
map <F1>c :cc<CR>
map <F1>n :cn<CR>
map <F1>p :cp<CR>
map <F1>l :cl<CR>

map <F2> :Syntax<CR>
map <F3> :Wrap<CR>

map <F1><F4> :Open<CR>
map <F1><F5> :Open<CR>

set tw=78

set foldmethod=syntax
set foldtext=getline(v:foldstart)
set foldlevel=10
set fillchars=fold:\ " note the whitespace after   
" not neccessary but useful (so you can use the TAB key to fold/unfold):
map <TAB> za

fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

" autocmd BufWritePre *.rb,*.cc,*.cpp,*.h,*.xml :call <SID>StripTrailingWhitespaces()
command Strip call <SID>StripTrailingWhitespaces()

highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

if has("autocmd")
 augroup cprog
  au!
  autocmd FileType *        setlocal formatoptions=tcql nocindent comments&
  autocmd FileType c,cpp    setlocal formatoptions=croql cindent comments=fl:/**/,sl1:/**,mb:*,ex:*/,://,sl:/*,mb:**,ex:*/
  autocmd FileType yaml,xml setlocal foldmethod=indent
 augroup END
endif

set path=.,,*;~/products/*/*/src,/usr/include,/usr/local/include,/usr/local/lib/gcc-lib/*/*/include
set tags=tags;~/products/*/*/src

filetype on           " Enable fieltype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

set cedit=<Esc>
set cmdwinheight=1

let Tlist_Enable_Fold_Column=0
let Tlist_Exit_OnlyWindow=1
let Tlist_Compact_Format=1

"so ~/.vim/fold/outlinetoggle.vim
"augroup C
"  au FileType c,cpp so ~bystr/.vim/fold/c-fold.vim
"augroup END

" <F8> to toggle display of special chars
nnoremap <F8> :set invlist list?<CR>

" when turning on special chars, tabs are '>---'
execute 'set listchars+=tab:>-' 

if filereadable(expand("~/.vimrc-local"))
    so ~/.vimrc-local
endif
